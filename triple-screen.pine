// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© pooripro

//@version=5
strategy("[DR.ELDER] Triple Screen", overlay = true, shorttitle = 'Triple Screen')
// Strategic Level (market tide) is big
// Tactical Level (market wave) is medium

// styling
show_table = input.bool(defval = true, title = 'Show Table')

// -------------------------------------
//#region GLOBAL FUNCTION 
// init ma
init_ma(type, source, length) => type == 'EMA' ? ta.ema(source = source, length = length) : ta.sma(source = source, length = length)

// handle inidicator higher timeframe to fillna
int_htf_fillna(indicator) => 
    var float temp_week = na
    var float temp_day  = na

    if na(indicator) 
        temp_week := temp_day
    else
        temp_day  := indicator
        temp_week := indicator

    temp_week

// handle ducplicate value to hold their status 
htf_slop_status(indicator, slope_num) =>
    var float temp_status = na

    if (indicator == indicator[slope_num])
        temp_status := temp_status
    else
        if(indicator > indicator[slope_num])
            temp_status := 1 // slope up
        else
            temp_status := 0 // slope down
    
    temp_status
//#endregion
// -------------------------------------

// -------------------------------------
//#region STRATEGIC LEVEL SECTION
// input higher TF
stra_tf = input.timeframe(defval = '1W', title = 'Strategic Timeframe')
stra_close = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = close)
// input moving average
stra_fast_ma_type   =   input.string(defval = 'EMA',     title = 'MA Type',          options = ['SMA', 'EMA'], group = 'Strategic MA')
stra_slow_ma_type   =   input.string(defval = 'EMA',     title = 'MA Type',          options = ['SMA', 'EMA'], group = 'Strategic MA')
stra_fast_ma_length =   input.int(defval = 13,           title = 'Fast MA Length',    group = 'Strategic MA')
stra_slow_ma_length =   input.int(defval = 26,           title = 'Slow MA Length',   group = 'Strategic MA')
// initial higher timeframe moving average
stra_fast_ma = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = init_ma(stra_fast_ma_type, close, stra_fast_ma_length)[1], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on )
stra_slow_ma = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = init_ma(stra_slow_ma_type, close, stra_slow_ma_length)[1], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on )

// init strategic with no na
stra_fast_ma_notnull = int_htf_fillna(stra_fast_ma)
stra_slow_ma_notnull = int_htf_fillna(stra_slow_ma)

// plot
plot(stra_fast_ma, title = 'Fast Strategic MA', color = color.aqua, linewidth = 3)
plot(stra_slow_ma, title = 'Slow Strategic MA', color = color.blue, linewidth = 3)

// input macd
stra_fast_macd_length = input.int(defval = 12,           title = 'Fast MA Length',    group = 'Strategic MACD') 
stra_slow_macd_length = input.int(defval = 26,           title = 'Slow MA Length',    group = 'Strategic MACD')
signal_stra_macd_length = input.int(defval = 9,           title = 'Signal MA Length',    group = 'Strategic MACD')
// init higher timeframe macd
stra_fast_macd_ma = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = init_ma('EMA', close, stra_fast_macd_length)[1], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on )
stra_slow_macd_ma = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = init_ma('EMA', close, stra_slow_macd_length)[1], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on )
stra_macd = stra_fast_macd_ma - stra_slow_macd_ma
stra_signal_ma = init_ma('EMA', stra_macd, signal_stra_macd_length)
stra_hist = stra_macd - stra_signal_ma

// init strategic with no na
stra_hist_notnull = int_htf_fillna(stra_hist)
stra_macd_notnull = int_htf_fillna(stra_macd)

stra_fast_ma_slop   = htf_slop_status(stra_fast_ma_notnull, 1)
stra_slow_ma_slop   = htf_slop_status(stra_slow_ma_notnull, 1)
stra_hist_slope     = htf_slop_status(stra_hist_notnull, 1)

plotshape(stra_hist_notnull, title = 'Impluse System', 
         style = shape.square, 
         color = (stra_hist_slope == 1 and stra_fast_ma_slop == 1) ? 
         color.green: (stra_hist_slope == 0 and stra_fast_ma_slop == 0) ?
         color.red : color.aqua
         , size = size.tiny, location = location.bottom)


//#endregion
// -------------------------------------

// -------------------------------------
//#region TACTICAL LEVEL SECTION
// input
tact_fast_ma_type   =   input.string(defval = 'EMA',     title = 'MA Type',          options = ['SMA', 'EMA'], group = 'Tactical MA')
tact_slow_ma_type   =   input.string(defval = 'EMA',     title = 'MA Type',          options = ['SMA', 'EMA'], group = 'Tactical MA')
tact_fast_ma_length =   input.int(defval = 13,           title = 'FastMA Length',    group = 'Tactical MA')
tact_slow_ma_length =   input.int(defval = 26,           title = 'Slow MA Length',   group = 'Tactical MA')

// initial moving average
tact_fast_ma    =   init_ma(tact_fast_ma_type, close, tact_fast_ma_length)
tact_slow_ma    =   init_ma(tact_slow_ma_type, close, tact_slow_ma_length)

// plot
plot(tact_fast_ma, title = 'Fast Tactical MA', color = color.lime, linewidth = 1)
plot(tact_slow_ma, title = 'Slow Tactical MA', color = color.teal, linewidth = 1)

// input macd
tact_fast_macd_length = input.int(defval = 12,           title = 'Fast MA Length',    group = 'Tactical MACD') 
tact_slow_macd_length = input.int(defval = 26,           title = 'Slow MA Length',    group = 'Tactical MACD')
tact_stra_macd_length = input.int(defval = 9,           title = 'Signal MA Length',    group = 'Tactical MACD')

tact_fast_macd_ma = init_ma('EMA', close, tact_fast_macd_length)
tact_slow_macd_ma = init_ma('EMA', close ,tact_slow_macd_length)
tact_macd = tact_fast_macd_ma - tact_slow_macd_ma
tact_signal_ma = init_ma('EMA', tact_macd, tact_stra_macd_length)
tact_hist = tact_macd - tact_signal_ma

//#endregion
// -------------------------------------

// -------------------------------------
//#region TABLE
//  ----------- strategic screening condition  -----------
stra_fast_ma_text   = stra_fast_ma_slop == 1    ? "Slope Up": "Slope Down"
stra_fast_ma_color  = stra_fast_ma_slop == 1    ? color.lime : color.red
stra_slow_ma_text   = stra_slow_ma_slop == 1    ? "Slope Up": "Slope Down"
stra_slow_ma_color  = stra_slow_ma_slop == 1    ? color.lime : color.red
stra_hist_text      = stra_hist_slope   == 1    ? "Slope Up": "Slope Down"
stra_hist_color     = stra_hist_slope   == 1    ? color.lime : color.red
stra_macd_text      = stra_macd_notnull > 0     ? "Above": "Under"
stra_macd_color     = stra_macd_notnull > 0     ? color.lime : color.red

//  ----------- tactical screening condition  -----------
tact_fast_ma_text   = tact_fast_ma > tact_fast_ma[1]    ? "Slope Up": "Slope Down"
tact_fast_ma_color  = tact_fast_ma > tact_fast_ma[1]    ? color.lime : color.red
tact_slow_ma_text   = tact_slow_ma > tact_slow_ma[1]    ? "Slope Up": "Slope Down"
tact_slow_ma_color  = tact_slow_ma > tact_slow_ma[1]    ? color.lime : color.red
tact_hist_text      = tact_hist > tact_hist[1]          ? "Slope Up": "Slope Down"
tact_hist_color     = tact_hist > tact_hist[1]          ? color.lime : color.red
tact_macd_text      = tact_macd > 0                     ? "Above": "Under"
tact_macd_color     = tact_macd > 0                     ? color.lime : color.red

var table my_table = table.new(position=position.middle_right, columns=2, rows=12, border_width = 1)
if (show_table)
    // merge cell
    table.merge_cells(my_table, 0, 0, 1, 0)
    table.merge_cells(my_table, 0, 5, 1, 5)

    // Strategic header
    table.cell(my_table, column=0, row=0, text="Strategic Level",                                           bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=1, text="MA " + str.tostring(stra_fast_ma_length) + " Fast",         bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=2, text="MA " + str.tostring(stra_slow_ma_length) + " Slow",         bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=3, text="MACD Hist.",                                                bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=4, text="MACD Zero-Line",                                            bgcolor = color.black, text_color = color.white)

    // Tactical header
    table.cell(my_table, column=0, row=5,   text="Tactical Level",                                            bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=7,   text="MA " + str.tostring(tact_fast_ma_length) + " Fast",         bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=8,   text="MA " + str.tostring(tact_slow_ma_length) + " Slow",         bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=9,   text="MACD Hist",                                                 bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=10,  text="MACD Zero-Line",                                            bgcolor = color.black, text_color = color.white)
    
    // Strategic value
    table.cell(my_table, column=1, row=1, text=stra_fast_ma_text,   bgcolor = color.black, text_color = stra_fast_ma_color)
    table.cell(my_table, column=1, row=2, text=stra_slow_ma_text,   bgcolor = color.black, text_color = stra_slow_ma_color)
    table.cell(my_table, column=1, row=3, text=stra_hist_text,      bgcolor = color.black, text_color = stra_hist_color)
    table.cell(my_table, column=1, row=4, text=stra_macd_text,      bgcolor = color.black, text_color = stra_macd_color)

    // Tacitical value
    table.cell(my_table, column=1, row=7,   text=tact_fast_ma_text,   bgcolor = color.black, text_color = tact_fast_ma_color)
    table.cell(my_table, column=1, row=8,   text=tact_slow_ma_text,   bgcolor = color.black, text_color = tact_slow_ma_color)
    table.cell(my_table, column=1, row=9,   text=tact_hist_text,      bgcolor = color.black, text_color = tact_hist_color)
    table.cell(my_table, column=1, row=10,  text=tact_macd_text,      bgcolor = color.black, text_color = tact_macd_color)


//#endregion
// -------------------------------------
