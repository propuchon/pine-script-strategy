// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© propuwaa

//@version=5
indicator("Triple Screen Original", overlay = true)
// Strategic Level (market tide) is big
// Tactical Level (market wave) is medium

// globle function init ma
init_ma(type, source, length) => type == 'EMA' ? ta.ema(source = source, length = length) : ta.sma(source = source, length = length)

// -------------------------------------
//#region STRATEGIC LEVEL SECTION
// input higher TF
show_table = input.bool(defval = true, title = 'Show Table')
stra_tf = input.timeframe(defval = '1W', title = 'Strategic Timeframe')
stra_close = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = close)
// input moving average
stra_fast_ma_type   =   input.string(defval = 'EMA',     title = 'MA Type',          options = ['SMA', 'EMA'], group = 'Strategic MA')
stra_slow_ma_type   =   input.string(defval = 'EMA',     title = 'MA Type',          options = ['SMA', 'EMA'], group = 'Strategic MA')
stra_fast_ma_length =   input.int(defval = 13,           title = 'Fast MA Length',    group = 'Strategic MA')
stra_slow_ma_length =   input.int(defval = 26,           title = 'Slow MA Length',   group = 'Strategic MA')
// declare moving average array
var stra_fast_ma_array = array.new_float()
var stra_slow_ma_array = array.new_float()

// initial moving average
stra_fast_ma = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = init_ma(stra_fast_ma_type, close, stra_fast_ma_length)[1], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on )
stra_slow_ma = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = init_ma(stra_slow_ma_type, close, stra_slow_ma_length)[1], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on )

// array handle only not null values
if not na(stra_fast_ma)
    array.push(stra_fast_ma_array, stra_fast_ma)
if not na(stra_slow_ma)
    array.push(stra_slow_ma_array, stra_slow_ma)

// plot
plot(stra_fast_ma, title = 'Fast Strategic MA', color = color.aqua, linewidth = 3)
plot(stra_slow_ma, title = 'Slow Strategic MA', color = color.blue, linewidth = 3)

// input macd
stra_fast_macd_length = input.int(defval = 12,           title = 'Fast MA Length',    group = 'Strategic MACD') 
stra_slow_macd_length = input.int(defval = 26,           title = 'Slow MA Length',    group = 'Strategic MACD')
signal_stra_macd_length = input.int(defval = 9,           title = 'Signal MA Length',    group = 'Strategic MACD')
// declare macd array
var stra_macd_array = array.new_float()
var stra_hist_array = array.new_float()

// init macd
stra_fast_macd_ma = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = init_ma('EMA', close, stra_fast_macd_length)[1], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on )
stra_slow_macd_ma = request.security(symbol = syminfo.tickerid, timeframe = stra_tf, expression = init_ma('EMA', close, stra_slow_macd_length)[1], gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on )
stra_macd = stra_fast_macd_ma - stra_slow_macd_ma
stra_signal_ma = init_ma('EMA', stra_macd, signal_stra_macd_length)
stra_hist = stra_macd - stra_signal_ma

if not na(stra_macd)
    array.push(stra_macd_array, stra_macd)
if not na(stra_hist)
    array.push(stra_hist_array, stra_hist)

// ----------------------------
// declare variable handle array
float stra_macd_last_element = na
float stra_macd_second_last_element = na
float stra_hist_last_element = na
float stra_hist_second_last_element = na
float stra_fast_ma_last_element = na
float stra_slow_ma_last_element = na

if barstate.islast
    // moving average
    stra_fast_ma_last_element           :=  array.get(stra_fast_ma_array, array.size(stra_fast_ma_array) - 1)
    stra_slow_ma_last_element           :=  array.get(stra_slow_ma_array, array.size(stra_slow_ma_array) - 1)
    // macd
    stra_macd_last_element              :=  array.get(stra_macd_array, array.size(stra_macd_array) - 1)
    stra_macd_second_last_element       :=  array.get(stra_macd_array, array.size(stra_macd_array) - 2)
    // hist
    stra_hist_last_element              :=  array.get(stra_hist_array, array.size(stra_hist_array) - 1)
    stra_hist_second_last_element            :=  array.get(stra_hist_array, array.size(stra_hist_array) - 2)
// ----------------------------


//#endregion
// -------------------------------------


// -------------------------------------
//#region TACTICAL LEVEL SECTION
// input
tact_fast_ma_type   =   input.string(defval = 'EMA',     title = 'MA Type',          options = ['SMA', 'EMA'], group = 'Tactical MA')
tact_slow_ma_type   =   input.string(defval = 'EMA',     title = 'MA Type',          options = ['SMA', 'EMA'], group = 'Tactical MA')
tact_fast_ma_length =   input.int(defval = 13,           title = 'FastMA Length',    group = 'Tactical MA')
tact_slow_ma_length =   input.int(defval = 26,           title = 'Slow MA Length',   group = 'Tactical MA')

// initial moving average
tact_fast_ma    =   init_ma(tact_fast_ma_type, close, tact_fast_ma_length)
tact_slow_ma    =   init_ma(tact_slow_ma_type, close, tact_slow_ma_length)

// plot
plot(tact_fast_ma, title = 'Fast Tactical MA', color = color.lime, linewidth = 1)
plot(tact_slow_ma, title = 'Slow Tactical MA', color = color.teal, linewidth = 1)

// input macd
tact_fast_macd_length = input.int(defval = 12,           title = 'Fast MA Length',    group = 'Tactical MACD') 
tact_slow_macd_length = input.int(defval = 26,           title = 'Slow MA Length',    group = 'Tactical MACD')
tact_stra_macd_length = input.int(defval = 9,           title = 'Signal MA Length',    group = 'Tactical MACD')

tact_fast_macd_ma = init_ma('EMA', close, tact_fast_macd_length)
tact_slow_macd_ma = init_ma('EMA', close ,tact_slow_macd_length)
tact_macd = tact_fast_macd_ma - tact_slow_macd_ma
tact_signal_ma = init_ma('EMA', tact_macd, tact_stra_macd_length)
tact_hist = tact_macd - tact_signal_ma

//#endregion
// -------------------------------------



// -------------------------------------
//#region TABLE
//  ----------- strategic screening condition  -----------
stra_fast_ma_text   = stra_close > stra_fast_ma_last_element                    ? "Above": "Under"
stra_fast_ma_color  = stra_close > stra_fast_ma_last_element                    ? color.lime : color.red
stra_slow_ma_text   = stra_close > stra_slow_ma_last_element                    ? "Above": "Under"
stra_slow_ma_color  = stra_close > stra_slow_ma_last_element                    ? color.lime : color.red
stra_hist_text      = stra_hist_last_element > stra_hist_second_last_element    ? "Slope Up": "Slope Down"
stra_hist_color     = stra_hist_last_element > stra_hist_second_last_element    ? color.lime : color.red
stra_macd_text      = stra_macd_last_element > 0                                ? "Above": "Under"
stra_macd_color     = stra_macd_last_element > 0                                ? color.lime : color.red
stra_impluse_color  = ((stra_close > stra_fast_ma_last_element) and (stra_close > stra_slow_ma_last_element) and (stra_hist_last_element > stra_hist_second_last_element)) ? 
                     color.lime : ((stra_close < stra_fast_ma_last_element) and (stra_close < stra_slow_ma_last_element) and (stra_hist_last_element < stra_hist_second_last_element)) ? 
                     color.red : color.aqua

//  ----------- tactical screening condition  -----------
tact_fast_ma_text   = close > tact_fast_ma      ? "Above": "Under"
tact_fast_ma_color  = close > tact_fast_ma      ? color.lime : color.red
tact_slow_ma_text   = close > tact_slow_ma      ? "Above": "Under"
tact_slow_ma_color  = close > tact_slow_ma      ? color.lime : color.red
tact_hist_text      = tact_hist > tact_hist[1]  ? "Slope Up": "Slope Down"
tact_hist_color     = tact_hist > tact_hist[1]  ? color.lime : color.red
tact_macd_text      = tact_macd > 0             ? "Above": "Under"
tact_macd_color     = tact_macd > 0             ? color.lime : color.red
tact_impluse_color  = ((close > tact_fast_ma) and (close > tact_slow_ma) and (tact_hist > tact_hist[1])) ?
                     color.lime : ((close < tact_fast_ma) and (close < tact_slow_ma) and (tact_hist < tact_hist[1])) ?
                     color.red : color.aqua

var table my_table = table.new(position=position.middle_right, columns=2, rows=12, border_width = 1)
if (barstate.islast) and (show_table)
    // Strategic header
    table.cell(my_table, column=0, row=0, text="Strategic Level",                                           bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=1, text="MA " + str.tostring(stra_fast_ma_length) + " Fast",         bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=2, text="MA " + str.tostring(stra_slow_ma_length) + " Slow",         bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=3, text="MACD Hist.",                                                bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=4, text="MACD Zero-Line",                                            bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=5, text="Impluse",                                                   bgcolor = color.black, text_color = color.white)
    // Tactical header
    table.cell(my_table, column=0, row=6,   text="Tactical Level",                                            bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=7,   text="MA " + str.tostring(tact_fast_ma_length) + " Fast",         bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=8,   text="MA " + str.tostring(tact_slow_ma_length) + " Slow",         bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=9,   text="MACD Hist",                                                 bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=10,  text="MACD Zero-Line",                                            bgcolor = color.black, text_color = color.white)
    table.cell(my_table, column=0, row=11,  text="Impluse",                                                   bgcolor = color.black, text_color = color.white)
    
    // Strategic value
    table.cell(my_table, column=1, row=1, text=stra_fast_ma_text,   bgcolor = color.black, text_color = stra_fast_ma_color)
    table.cell(my_table, column=1, row=2, text=stra_slow_ma_text,   bgcolor = color.black, text_color = stra_slow_ma_color)
    table.cell(my_table, column=1, row=3, text=stra_hist_text,      bgcolor = color.black, text_color = stra_hist_color)
    table.cell(my_table, column=1, row=4, text=stra_macd_text,      bgcolor = color.black, text_color = stra_macd_color)
    table.cell(my_table, column=1, row=5,                           bgcolor = stra_impluse_color, text_color = stra_macd_color)

    // Tacitical value
    table.cell(my_table, column=1, row=7,   text=tact_fast_ma_text,   bgcolor = color.black, text_color = tact_fast_ma_color)
    table.cell(my_table, column=1, row=8,   text=tact_slow_ma_text,   bgcolor = color.black, text_color = tact_slow_ma_color)
    table.cell(my_table, column=1, row=9,   text=tact_hist_text,      bgcolor = color.black, text_color = tact_hist_color)
    table.cell(my_table, column=1, row=10,  text=tact_macd_text,      bgcolor = color.black, text_color = tact_macd_color)
    table.cell(my_table, column=1, row=11,                            bgcolor = tact_impluse_color, text_color = stra_macd_color)

    // rechecked value of MACD
    // table.cell(my_table, column=1, row=7, text=str.tostring(math.round(array.get(stra_macd_array, array.size(stra_macd_array) - 1), 2)),        bgcolor = color.black, text_color = color.white)
    // table.cell(my_table, column=1, row=8, text=str.tostring(math.round(array.get(stra_fast_ma_array, array.size(stra_fast_ma_array) - 1), 2)),        bgcolor = color.black, text_color = color.white)
    // table.cell(my_table, column=1, row=9, text=str.tostring(math.round(array.get(stra_fast_ma_array, array.size(stra_fast_ma_array) - 2), 2)),        bgcolor = color.black, text_color = color.white)
    
    // merge cell
    table.merge_cells(my_table, 0, 0, 1, 0)
    table.merge_cells(my_table, 0, 6, 1, 6)

//#endregion
// -------------------------------------
